        -:    0:Source:tests/test1.c
        -:    0:Graph:tests/test1.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:#include "lib/tests/macros.h"
        -:    2:#include "lib/asserts.h"
        -:    3:#include "lib/memory/malloc.h"
        -:    4:#include "lib/memory/free.h"
        -:    5:#include <stdio.h>
        -:    6:#include <string.h>
        -:    7:
    #####:    8:Test(basic_test, test1)
        -:    9:{
    #####:   10:    cr_assert(1 == 1);
    #####:   11:}
------------------
test1basic_test:
    #####:    8:Test(basic_test, test1)
        -:    9:{
    #####:   10:    cr_assert(1 == 1);
    #####:   11:}
------------------
__test1basic_test:
    #####:    8:Test(basic_test, test1)
------------------
        -:   12:
    #####:   13:Test(basic_test, test2)
        -:   14:{
    #####:   15:    cr_assert(1 == 2);
    #####:   16:}
------------------
test2basic_test:
    #####:   13:Test(basic_test, test2)
        -:   14:{
    #####:   15:    cr_assert(1 == 2);
    #####:   16:}
------------------
__test2basic_test:
    #####:   13:Test(basic_test, test2)
------------------
        -:   17:
    #####:   18:Test(string, test1)
        -:   19:{
    #####:   20:    cr_assert_str_eq("Hello", "Hello");
    #####:   21:}
------------------
test1string:
    #####:   18:Test(string, test1)
        -:   19:{
    #####:   20:    cr_assert_str_eq("Hello", "Hello");
    #####:   21:}
------------------
__test1string:
    #####:   18:Test(string, test1)
------------------
        -:   22:
    #####:   23:Test(string, test2)
        -:   24:{
    #####:   25:    cr_assert_str_neq("Hello", "Hello");
    #####:   26:}
------------------
test2string:
    #####:   23:Test(string, test2)
        -:   24:{
    #####:   25:    cr_assert_str_neq("Hello", "Hello");
    #####:   26:}
------------------
__test2string:
    #####:   23:Test(string, test2)
------------------
        -:   27:
    #####:   28:Test(output, stdout)
        -:   29:{
    #####:   30:    printf("Hello");
    #####:   31:    assert_stdout("Hello");
    #####:   32:}
------------------
stdoutoutput:
    #####:   28:Test(output, stdout)
        -:   29:{
    #####:   30:    printf("Hello");
    #####:   31:    assert_stdout("Hello");
    #####:   32:}
------------------
__stdoutoutput:
    #####:   28:Test(output, stdout)
------------------
        -:   33:
    #####:   34:Test(output, stdout2)
        -:   35:{
    #####:   36:    printf("Hello2");
    #####:   37:    assert_stdout("Hello2");
    #####:   38:}
------------------
stdout2output:
    #####:   34:Test(output, stdout2)
        -:   35:{
    #####:   36:    printf("Hello2");
    #####:   37:    assert_stdout("Hello2");
    #####:   38:}
------------------
__stdout2output:
    #####:   34:Test(output, stdout2)
------------------
        -:   39:
    #####:   40:Test(output, stderr)
        -:   41:{
    #####:   42:    fprintf(stderr, "Hello");
    #####:   43:    assert_stderr("Hello");
    #####:   44:}
------------------
stderroutput:
    #####:   40:Test(output, stderr)
        -:   41:{
    #####:   42:    fprintf(stderr, "Hello");
    #####:   43:    assert_stderr("Hello");
    #####:   44:}
------------------
__stderroutput:
    #####:   40:Test(output, stderr)
------------------
        -:   45:
    #####:   46:Test(output, stderr2)
        -:   47:{
    #####:   48:    fprintf(stderr, "Hello2");
    #####:   49:    assert_stderr("Hello");
    #####:   50:}
------------------
stderr2output:
    #####:   46:Test(output, stderr2)
        -:   47:{
    #####:   48:    fprintf(stderr, "Hello2");
    #####:   49:    assert_stderr("Hello");
    #####:   50:}
------------------
__stderr2output:
    #####:   46:Test(output, stderr2)
------------------
        -:   51:
    #####:   52:Test(multiple, basic1)
        -:   53:{
    #####:   54:    cr_assert(1 == 1);
    #####:   55:    cr_assert(1 == 2);
    #####:   56:    cr_assert(1 == 1);
    #####:   57:}
------------------
basic1multiple:
    #####:   52:Test(multiple, basic1)
        -:   53:{
    #####:   54:    cr_assert(1 == 1);
    #####:   55:    cr_assert(1 == 2);
    #####:   56:    cr_assert(1 == 1);
    #####:   57:}
------------------
__basic1multiple:
    #####:   52:Test(multiple, basic1)
------------------
        -:   58:
    #####:   59:void memory_leak_func(const char *str)
        -:   60:{
    #####:   61:    char *ptr = malloc(sizeof(char) * 10);
    #####:   62:    free(ptr);
    #####:   63:}
        -:   64:
    #####:   65:void memory_leak_func_2(const char *str)
        -:   66:{
    #####:   67:    char *ptr = malloc(sizeof(char) * 10);
    #####:   68:}
        -:   69:
    #####:   70:void *return_ptr(const char *str)
        -:   71:{
    #####:   72:    char *ptr = malloc(sizeof(char) * 10);
    #####:   73:    return ptr;
        -:   74:}
        -:   75:
    #####:   76:MemoryTest(basic, memory_leak, memory_leak_func("Hello"));
    #####:   77:MemoryTest(basic, memory_leak2, memory_leak_func_2("Hello2"));
    #####:   78:MemoryTestLeakAllowed(basic, memory_leak3, memory_leak_func_2("Hello2"), 1);
        -:   79:// MemoryTest(basic, memory_leak2, memory_leak_func("Hello2"));
